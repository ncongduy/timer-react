{"version":3,"sources":["audio/nothing mix adc _01.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","disabled","setDisabled","useSound","music","play","className","type","placeholder","onChange","target","value","onClick","intervalid","setInterval","prev","clearInterval","Math","floor","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,gD,OC6C1BA,MAxCf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAeC,YAASC,GAAjBC,EAAP,oBAyBA,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,KAAK,SAASC,YAAY,eAAeC,SAN/B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBV,EAAQU,EAAOC,UAMb,wBAAQC,QA1BK,WACf,IAAMC,EAAaC,aAAY,WAC7Bd,GAAQ,SAACe,GACP,OAAIA,EAAO,GACM,GAAPA,EAAY,GAAK,IAEzBC,cAAcH,GACdR,IACO,QAGV,KACHH,GAAY,IAciBD,SAAUA,EAArC,iBAGA,sCAAOgB,KAAKC,MAAc,GAAPnB,EAAa,IAAhC,YAAuCkB,KAAKC,MAAc,GAAPnB,EAAa,OAChE,wBAAQa,QAfK,WACfO,OAAOC,SAASC,UAcd,uBC5BSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ea2aacd8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nothing mix adc _01.22ba4f03.mp3\";","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport useSound from \"use-sound\"; //npm install use-sound\r\nimport music from \"./audio/nothing mix adc _01.mp3\";\r\n\r\nfunction App() {\r\n  const [time, setTime] = useState(0);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [play] = useSound(music);\r\n\r\n  const runTimer = () => {\r\n    const intervalid = setInterval(() => {\r\n      setTime((prev) => {\r\n        if (prev > 0) {\r\n          return (prev * 60 - 1) / 60;\r\n        } else {\r\n          clearInterval(intervalid);\r\n          play();\r\n          return 0;\r\n        }\r\n      });\r\n    }, 1000);\r\n    setDisabled(true);\r\n  };\r\n\r\n  const resetApp = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setTime(target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"number\" placeholder=\"Type minutes\" onChange={handleChange} />\r\n      <button onClick={runTimer} disabled={disabled}>\r\n        Run\r\n      </button>\r\n      <p>{`${Math.floor((time * 60) / 60)}:${Math.floor((time * 60) % 60)}`}</p>\r\n      <button onClick={resetApp}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}