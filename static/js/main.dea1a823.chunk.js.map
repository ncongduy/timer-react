{"version":3,"sources":["audio/nothing mix adc _01.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","useState","remainingSeconds","setRemainingSeconds","onGoing","setOnGoing","isTriggered","setIsTriggered","useSound","music","playSound","stop","minutes","Math","floor","seconds","timer","useRef","useEffect","current","setInterval","prev","clearTimer","clearInterval","document","getElementById","value","className","id","type","placeholder","onChange","target","inputMinute","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oOAAe,MAA0B,gD,OC0E1BA,MArEf,WACE,MAAgDC,mBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA8BC,YAASC,GAAvC,mBAAOC,EAAP,KAAoBC,EAApB,KAAoBA,KAEhBC,EAAUC,KAAKC,MAAMZ,EAAmB,IACxCa,EAAUF,KAAKC,MAAMZ,EAAmB,IACtCc,EAAQC,iBAAO,MAErBC,qBAAU,YACHd,GAAWE,IACdD,GAAW,GACXW,EAAMG,QAAUC,aAAY,WAC1BjB,GAAoB,SAACkB,GACnB,OAAIA,EAAO,EACFA,EAAO,GAEdC,IACAZ,IACO,QAGV,QAEJ,CAACJ,IAEJ,IAMMgB,EAAa,WACjBC,cAAcP,EAAMG,SACpBH,EAAMG,QAAU,KAChBd,GAAW,GACXE,GAAe,GACfJ,EAAoB,GACpBqB,SAASC,eAAe,aAAaC,MAAQ,GAe/C,OACE,sBAAKC,UAAU,MAAf,UACE,uBACEC,GAAG,YACHC,KAAK,SACLC,YAAY,eACZC,SAbe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtB,IAAK5B,EAAS,CACZ,IAAI6B,EAAcD,EAAON,MACzBvB,EAAkC,GAAd8B,OAYpB,wBAAQC,QAnCK,YACV9B,GAAWF,EAAmB,GACjCK,GAAe,IAiCf,iBACA,sCAAOK,EAAP,YAAkBG,KAClB,wBAAQmB,QAtBK,WACfZ,IACAX,KAoBE,uBCzDSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BU,M","file":"static/js/main.dea1a823.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nothing mix adc _01.22ba4f03.mp3\";","import \"./App.css\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport useSound from \"use-sound\"; //npm install use-sound\r\nimport music from \"./audio/nothing mix adc _01.mp3\";\r\n\r\nfunction App() {\r\n  const [remainingSeconds, setRemainingSeconds] = useState(0);\r\n  const [onGoing, setOnGoing] = useState(false);\r\n  const [isTriggered, setIsTriggered] = useState(false);\r\n  const [playSound, { stop }] = useSound(music);\r\n\r\n  let minutes = Math.floor(remainingSeconds / 60);\r\n  let seconds = Math.floor(remainingSeconds % 60);\r\n  const timer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!onGoing && isTriggered) {\r\n      setOnGoing(true);\r\n      timer.current = setInterval(() => {\r\n        setRemainingSeconds((prev) => {\r\n          if (prev > 0) {\r\n            return prev - 1;\r\n          } else {\r\n            clearTimer();\r\n            playSound();\r\n            return 0;\r\n          }\r\n        });\r\n      }, 1000);\r\n    }\r\n  }, [isTriggered]);\r\n\r\n  const runTimer = () => {\r\n    if (!onGoing && remainingSeconds > 0) {\r\n      setIsTriggered(true);\r\n    }\r\n  };\r\n\r\n  const clearTimer = () => {\r\n    clearInterval(timer.current);\r\n    timer.current = null;\r\n    setOnGoing(false);\r\n    setIsTriggered(false);\r\n    setRemainingSeconds(0);\r\n    document.getElementById(\"inputTime\").value = 0;\r\n  };\r\n\r\n  const resetApp = () => {\r\n    clearTimer();\r\n    stop();\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    if (!onGoing) {\r\n      let inputMinute = target.value;\r\n      setRemainingSeconds(inputMinute * 60);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input\r\n        id=\"inputTime\"\r\n        type=\"number\"\r\n        placeholder=\"Type minutes\"\r\n        onChange={handleChange}\r\n      />\r\n      <button onClick={runTimer}>Run</button>\r\n      <p>{`${minutes}:${seconds}`}</p>\r\n      <button onClick={resetApp}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}