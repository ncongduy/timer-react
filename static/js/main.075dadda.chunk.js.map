{"version":3,"sources":["audio/nothing mix adc _01.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","playTimer","setPlayTimer","useSound","music","play","minutes","Math","floor","seconds","useEffect","intervalid","setInterval","prev","clearInterval","className","type","placeholder","onChange","target","value","onClick","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,gD,OCmD1BA,MA9Cf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAeC,YAASC,GAAjBC,EAAP,oBAEIC,EAAUC,KAAKC,MAAc,GAAPT,EAAa,IACnCU,EAAUF,KAAKC,MAAc,GAAPT,EAAa,IA8BvC,OA5BAW,qBAAU,WACR,GAAIT,EACF,IAAMU,EAAaC,aAAY,WAC7BZ,GAAQ,SAACa,GACP,OAAIA,EAAO,GACM,GAAPA,EAAY,GAAK,IAEzBC,cAAcH,GACdN,IACO,QAGV,OAEJ,CAACJ,IAeF,sBAAKc,UAAU,MAAf,UACE,uBAAOC,KAAK,SAASC,YAAY,eAAeC,SAN/B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBnB,EAAQmB,EAAOC,UAMb,wBAAQC,QAfK,WACfnB,GAAa,IAcX,iBACA,sCAAOI,EAAP,YAAkBG,KAClB,wBAAQY,QAbK,WACfC,OAAOC,SAASC,UAYd,uBClCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.075dadda.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nothing mix adc _01.22ba4f03.mp3\";","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport useSound from \"use-sound\"; //npm install use-sound\r\nimport music from \"./audio/nothing mix adc _01.mp3\";\r\n\r\nfunction App() {\r\n  const [time, setTime] = useState(0);\r\n  const [playTimer, setPlayTimer] = useState(false);\r\n  const [play] = useSound(music);\r\n\r\n  let minutes = Math.floor((time * 60) / 60);\r\n  let seconds = Math.floor((time * 60) % 60);\r\n\r\n  useEffect(() => {\r\n    if (playTimer) {\r\n      const intervalid = setInterval(() => {\r\n        setTime((prev) => {\r\n          if (prev > 0) {\r\n            return (prev * 60 - 1) / 60;\r\n          } else {\r\n            clearInterval(intervalid);\r\n            play();\r\n            return 0;\r\n          }\r\n        });\r\n      }, 1000);\r\n    }\r\n  }, [playTimer]);\r\n\r\n  const runTimer = () => {\r\n    setPlayTimer(true);\r\n  };\r\n\r\n  const resetApp = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setTime(target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"number\" placeholder=\"Type minutes\" onChange={handleChange} />\r\n      <button onClick={runTimer}>Run</button>\r\n      <p>{`${minutes}:${seconds}`}</p>\r\n      <button onClick={resetApp}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}