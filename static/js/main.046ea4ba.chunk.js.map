{"version":3,"sources":["audio/nothing mix adc _01.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","useState","task","setTask","time","setTime","hours","setHours","minutes","setMinutes","seconds","setSeconds","isOngoing","setIsOnGoing","useSound","music","play","stop","runInterval","useRef","useEffect","endTimer","Date","getTime","current","setInterval","currentTimer","countTimer","Math","floor","slice","checkTimer","clearInterval","resetTime","className","onSubmit","evt","preventDefault","console","log","name","type","placeholder","value","onChange","target","parseInt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,MAA0B,gD,eCwG1BA,MAlGf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,mBAAS,MAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,mBAAS,MAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAkCV,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAuBC,YAASC,GAAhC,mBAAOC,EAAP,KAAcC,EAAd,KAAcA,KACRC,EAAcC,iBAAO,MAE3BC,qBAAU,WACR,GAAKR,EAAL,CAEA,IACMS,GADa,IAAIC,MAAOC,UACO,GAAPnB,EAAY,IAAO,IAcjD,OAZAc,EAAYM,QAAUC,aAAY,WAChC,IAAIC,GAAe,IAAIJ,MAAOC,UAC1BI,EAAaN,EAAWK,EAE5BnB,GAAS,iBAAM,WAAIqB,KAAKC,MAAOF,EAAU,KAAuB,KAAMG,OAAO,MAC7ErB,GAAW,iBAAM,WAAImB,KAAKC,MAAMF,EAAU,KAAkB,IAAKG,OAAO,MACxEnB,GAAW,iBAAM,WAAIiB,KAAKC,MAAMF,EAAa,KAAQ,IAAKG,OAAO,MAGjEC,EAAWJ,KACV,KAEI,kBAAMK,cAAcd,EAAYM,aACtC,CAACZ,EAAWR,IAEf,IAAM6B,EAAY,WAChBD,cAAcd,EAAYM,SAC1BN,EAAYM,QAAU,KAGtBjB,EAAS,MACTE,EAAW,MACXE,EAAW,MACXE,GAAa,IAGTkB,EAAa,SAAC3B,GACdA,GAAQ,IAEZ6B,IACAjB,MAuBF,OACE,sBAAKkB,UAAU,MAAf,UACE,uBAAMC,SAtBO,SAACC,GAChBA,EAAIC,iBAEJC,QAAQC,IAAI,aACZ1B,GAAa,IAkBX,UACE,uBACE2B,KAAK,OACLC,KAAK,OACLC,YAAY,iBACZC,MAAOzC,EACP0C,SArBgB,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACxB1C,EAAQ0C,EAAOF,UAsBX,uBACEH,KAAK,UACLC,KAAK,OACLC,YAAY,eACZC,MAAOvC,EACPwC,SAxBgB,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACxBxC,EAAQyC,SAASD,EAAOF,WAyBpB,uBAAOT,UAAU,aAAaO,KAAK,SAASE,MAAM,QAElD,uCACSzC,EADT,iBACsBI,EADtB,YAC+BE,EAD/B,YAC0CE,SAI5C,wBAAQqC,QA7BK,WACfd,IACAhB,KA2BE,uBCvFS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.046ea4ba.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nothing mix adc _01.22ba4f03.mp3\";","import {useState, useRef, useEffect} from 'react';\nimport useSound from 'use-sound';\n\nimport music from './audio/nothing mix adc _01.mp3';\nimport './App.css';\n\nfunction App() {\n  const [task, setTask] = useState('');\n  const [time, setTime] = useState('');\n  const [hours, setHours] = useState('00');\n  const [minutes, setMinutes] = useState('00');\n  const [seconds, setSeconds] = useState('00');\n  const [isOngoing, setIsOnGoing] = useState(false);\n  const [play, {stop}] = useSound(music);\n  const runInterval = useRef(null);\n\n  useEffect(() => {\n    if (!isOngoing) return;\n\n    const startTimer = new Date().getTime();\n    const endTimer = startTimer + time * 60 * 1000 + 1000;\n\n    runInterval.current = setInterval(() => {\n      let currentTimer = new Date().getTime();\n      let countTimer = endTimer - currentTimer;\n\n      setHours(() => `0${Math.floor((countTimer / (60 * 60 * 1000)) % 24)}`.slice(-2));\n      setMinutes(() => `0${Math.floor(countTimer / (60 * 1000)) % 60}`.slice(-2));\n      setSeconds(() => `0${Math.floor(countTimer / 1000) % 60}`.slice(-2));\n\n      //if on time, play music\n      checkTimer(countTimer);\n    }, 1000);\n\n    return () => clearInterval(runInterval.current);\n  }, [isOngoing, time]);\n\n  const resetTime = () => {\n    clearInterval(runInterval.current);\n    runInterval.current = null;\n    // setTask('');\n    // setTime('');\n    setHours('00');\n    setMinutes('00');\n    setSeconds('00');\n    setIsOnGoing(false);\n  };\n\n  const checkTimer = (time) => {\n    if (time >= 0) return;\n\n    resetTime();\n    play();\n  };\n\n  const runTimer = (evt) => {\n    evt.preventDefault();\n\n    console.log('run timer');\n    setIsOnGoing(true);\n  };\n\n  const handleTaskInput = ({target}) => {\n    setTask(target.value);\n  };\n\n  const handleTimeInput = ({target}) => {\n    setTime(parseInt(target.value));\n  };\n\n  const resetApp = () => {\n    resetTime();\n    stop();\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={runTimer}>\n        <input\n          name=\"task\"\n          type=\"text\"\n          placeholder=\"Type your task\"\n          value={task}\n          onChange={handleTaskInput}\n        />\n        <input\n          name=\"minutes\"\n          type=\"text\"\n          placeholder=\"Type minutes\"\n          value={time}\n          onChange={handleTimeInput}\n        />\n        <input className=\"submit-btn\" type=\"submit\" value=\"Run\" />\n\n        <p>\n          Task: {task} || {`${hours}:${minutes}:${seconds}`}\n        </p>\n      </form>\n\n      <button onClick={resetApp}>Reset</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}